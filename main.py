import pyperclip
import requests
import re
from urllib.parse import quote
import sys
import json
import os
import concurrent.futures
import time

# –°–ü–ò–°–û–ö –°–û–†–¢–ò–†–û–í–ö–ò –ü–û –ë–õ–ò–ó–û–°–¢–ò –ö –ü–°–ö–û–í–£
PSKOV_PROXIMITY_ORDER = [
    "FI", "LV", "BY", "LT", "EE",
    "PL", "UA", "SE", "NO", "DE", "CZ", "SK", "HU",
    "NL", "BE", "LU", "CH", "AT", "FR", "GB", "IE", "DK",
    "ES", "PT", "IT", "GR", "RO", "BG", "RS", "HR", "SI",
    "TR", "MD", "GE", "AM", "AZ", "CA", "US",
]

def load_country_map(filename="country_map.json"):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–∞—Ä—Ç—É —Å—Ç—Ä–∞–Ω –∏–∑ JSON-—Ñ–∞–π–ª–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫."""
    script_dir = os.path.dirname(os.path.abspath(__file__))
    file_path = os.path.join(script_dir, filename)
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            return json.load(f)
    except FileNotFoundError:
        print(f"‚ùå –§–∞–π–ª '{filename}' –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É—é —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Å—Ç—Ä–∞–Ω.")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}")
    return {}

def get_flag_emoji(country_code: str) -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —ç–º–æ–¥–∑–∏ —Ñ–ª–∞–≥–∞ –ø–æ –∫–æ–¥—É —Å—Ç—Ä–∞–Ω—ã."""
    if not country_code or len(country_code) != 2 or not country_code.isalpha():
        return "üèÅ"
    offset = 0x1F1E6 - ord('A')
    return chr(ord(country_code.upper()[0]) + offset) + chr(ord(country_code.upper()[1]) + offset)

def get_country_info(ip_address, country_map):
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç—Ä–∞–Ω–µ —á–µ—Ä–µ–∑ ipwho.is API."""
    try:
        response = requests.get(
            f'https://ipwho.is/{ip_address}',
            params={'fields': 'country,country_code'},
            timeout=5
        )
        response.raise_for_status()
        data = response.json()
        
        if not data.get('success'):
            error = data.get('message', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ API')
            print(f"‚ùå API –æ—à–∏–±–∫–∞ –¥–ª—è {ip_address}: {error}")
            return None
        
        return {
            'code': data.get('country_code'),
            'name': data.get('country')
        }
    except requests.RequestException as e:
        print(f"üåê –°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ –¥–ª—è {ip_address}: {str(e)}")
    except Exception as e:
        print(f"‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –¥–ª—è {ip_address}: {str(e)}")
    return None

def process_single_config(config_line, country_map):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É –∫–æ–Ω—Ñ–∏–≥–∞ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫."""
    if not config_line.strip():
        return ('ZZZ', config_line)

    # –£–ª—É—á—à–µ–Ω–Ω–æ–µ —Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ IP
    ip_match = re.search(r'\b(?:\d{1,3}\.){3}\d{1,3}\b', config_line)
    if not ip_match:
        print(f"üîç IP –Ω–µ –Ω–∞–π–¥–µ–Ω: {config_line[:50]}{'...' if len(config_line) > 50 else ''}")
        return ('ZZZ', config_line)

    ip_address = ip_match.group(0)
    base_config = config_line.split('#')[0].rstrip()

    country_info = get_country_info(ip_address, country_map)
    if not country_info:
        return ('ZZZ', config_line)

    country_code = country_info['code'].upper() if country_info['code'] else '??'
    country_name = country_map.get(country_code, country_info['name'])
    
    flag = get_flag_emoji(country_code)
    new_name = f"{flag} {country_name}"
    encoded_name = quote(new_name)
    
    return (
        country_code,
        f"{base_config}#{encoded_name}"
    )

def run_processing():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫."""
    country_map = load_country_map()
    print("–ó–∞–≥—Ä—É–∂–µ–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–π —Å—Ç—Ä–∞–Ω:", len(country_map))

    try:
        clipboard_content = pyperclip.paste().strip()
        if not clipboard_content:
            print("üìã –ë—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞ –ø—É—Å—Ç")
            return
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –±—É—Ñ–µ—Ä–∞: {str(e)}")
        return

    configs = clipboard_content.splitlines()
    print(f"üîß –ù–∞–π–¥–µ–Ω–æ –∫–æ–Ω—Ñ–∏–≥–æ–≤: {len(configs)}")
    
    if not configs:
        print("‚ùå –ù–µ—Ç –∫–æ–Ω—Ñ–∏–≥–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
        return

    print("üöÄ –ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É...")
    start_time = time.time()
    processed_results = []
    
    with concurrent.futures.ThreadPoolExecutor(max_workers=15) as executor:
        futures = [executor.submit(process_single_config, conf, country_map) for conf in configs]
        
        for i, future in enumerate(concurrent.futures.as_completed(futures)):
            try:
                processed_results.append(future.result())
                if (i + 1) % 10 == 0:
                    print(f"‚è≥ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {i+1}/{len(configs)}")
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {str(e)}")
                processed_results.append(('ZZZ', configs[i]))

    print(f"‚åõ –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {time.time() - start_time:.1f} —Å–µ–∫")

    # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –∫–∞—Å—Ç–æ–º–Ω–æ–º—É –ø–æ—Ä—è–¥–∫—É
    priority_map = {code: idx for idx, code in enumerate(PSKOV_PROXIMITY_ORDER)}
    processed_results.sort(key=lambda x: (
        priority_map.get(x[0], float('inf')),
        x[0]
    ))

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    output_lines = [res[1] for res in processed_results]
    output_filename = 'configs.txt'
    
    try:
        with open(output_filename, 'w', encoding='utf-8') as f:
            f.write('\n'.join(output_lines))
        print(f"üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {output_filename}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {str(e)}")

if __name__ == "__main__":
    run_processing()