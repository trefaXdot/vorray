import pyperclip
import requests
import re
from urllib.parse import quote
import sys
import json
import os
import concurrent.futures

# –°–ü–ò–°–û–ö –°–û–†–¢–ò–†–û–í–ö–ò –ü–û –ë–õ–ò–ó–û–°–¢–ò –ö –ü–°–ö–û–í–£
PSKOV_PROXIMITY_ORDER = [
    "RU", "EE", "LV", "BY", "LT", "FI", "PL", "UA", "SE", "NO", "DE",
    "CZ", "SK", "HU", "NL", "BE", "LU", "CH", "AT", "FR", "GB", "IE",
    "DK", "ES", "PT", "IT", "GR", "RO", "BG", "RS", "HR", "SI", "TR",
    "MD", "GE", "AM", "AZ", "CA", "US",
]

def load_country_map(filename="country_map.json"):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–∞—Ä—Ç—É —Å—Ç—Ä–∞–Ω –∏–∑ JSON-—Ñ–∞–π–ª–∞."""
    script_dir = os.path.dirname(os.path.abspath(__file__))
    file_path = os.path.join(script_dir, filename)
    if not os.path.exists(file_path):
        print(f"‚ùå –û—à–∏–±–∫–∞: –§–∞–π–ª '{filename}' –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return None
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            return json.load(f)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ '{filename}': {e}")
        return None

def get_flag_emoji(country_code: str) -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —ç–º–æ–¥–∑–∏ —Ñ–ª–∞–≥–∞ –ø–æ –∫–æ–¥—É —Å—Ç—Ä–∞–Ω—ã."""
    if not country_code or len(country_code) != 2 or not country_code.isalpha():
        return "üèÅ"
    offset = 0x1F1E6 - ord('A')
    return chr(ord(country_code.upper()[0]) + offset) + chr(ord(country_code.upper()[1]) + offset)

def process_single_config(config_line, country_map):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –û–î–ù–£ —Å—Ç—Ä–æ–∫—É –∫–æ–Ω—Ñ–∏–≥–∞, –∏—Å–ø–æ–ª—å–∑—É—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç –∏–Ω–¥—É—Å—Ç—Ä–∏–∏ ‚Äî ipinfo.io.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ—Ä—Ç–µ–∂ (–∫–æ–¥ —Å—Ç—Ä–∞–Ω—ã, –Ω–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞ –∫–æ–Ω—Ñ–∏–≥–∞) –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–π —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏.
    """
    if not config_line.strip():
        return ('ZZZ', config_line)

    ip_match = re.search(r'\b\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}\b', config_line)
    if not ip_match:
        print(f"‚ö†Ô∏è  IP –Ω–µ –Ω–∞–π–¥–µ–Ω, –æ—Å—Ç–∞–≤–ª—è—é –∫–∞–∫ –µ—Å—Ç—å: {config_line[:50]}...")
        return ('ZZZ', config_line)

    ip_address = ip_match.group(0)
    base_config = config_line.split('#')[0]

    try:
        # --- –ò–ó–ú–ï–ù–ï–ù–ò–ï –ó–î–ï–°–¨: –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–∞–º—ã–π –Ω–∞–¥–µ–∂–Ω—ã–π API ipinfo.io ---
        api_url = f'https://ipinfo.io/{ip_address}/json'
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π User-Agent, —Ç–∞–∫ –∫–∞–∫ ipinfo.io —ç—Ç–æ–≥–æ —Ç—Ä–µ–±—É–µ—Ç
        headers = {'User-Agent': 'Mozilla/5.0'}
        response = requests.get(api_url, timeout=4, headers=headers)
        response.raise_for_status()
        data = response.json()
        
        # –ü–æ–ª–µ —Å –∫–æ–¥–æ–º —Å—Ç—Ä–∞–Ω—ã –≤ –æ—Ç–≤–µ—Ç–µ ipinfo.io –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è 'country'
        country_code = data.get('country')
        if country_code:
            country_name_ru = country_map.get(country_code, data.get('country', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'))
            flag = get_flag_emoji(country_code)
            new_name = f"{flag} {country_name_ru}"
            
            encoded_new_name = quote(new_name)
            new_config_line = f"{base_config}#{encoded_new_name}"
            print(f"‚úÖ  {ip_address} -> {new_name}")
            return (country_code, new_config_line)
        else:
            print(f"‚ùå  API –Ω–µ –≤–µ—Ä–Ω—É–ª —Å—Ç—Ä–∞–Ω—É –¥–ª—è IP {ip_address}. –û—Å—Ç–∞–≤–ª—è—é –∫–∞–∫ –µ—Å—Ç—å.")
            return ('ZZZ', config_line)
    except requests.RequestException:
        print(f"‚ùå  –û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –∏–ª–∏ IP –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è {ip_address}. –û—Å—Ç–∞–≤–ª—è—é –∫–∞–∫ –µ—Å—Ç—å.")
        return ('ZZZ', config_line)
    except json.JSONDecodeError:
        print(f"‚ùå  API –≤–µ—Ä–Ω—É–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –¥–ª—è {ip_address}. –û—Å—Ç–∞–≤–ª—è—é –∫–∞–∫ –µ—Å—Ç—å.")
        return ('ZZZ', config_line)

def run_processing():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è, —É–ø—Ä–∞–≤–ª—è—é—â–∞—è –≤—Å–µ–º –ø—Ä–æ—Ü–µ—Å—Å–æ–º."""
    country_map = load_country_map()
    if not country_map:
        return

    try:
        clipboard_content = pyperclip.paste()
        if not clipboard_content:
            print("–ë—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞ –ø—É—Å—Ç. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –∫–æ–Ω—Ñ–∏–≥–∏ –∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç —Å–Ω–æ–≤–∞.")
            return
    except pyperclip.PyperclipException:
        print("–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –±—É—Ñ–µ—Ä—É –æ–±–º–µ–Ω–∞. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∞—è —Å—Ä–µ–¥–∞.")
        return
        
    configs = clipboard_content.strip().splitlines()
    print(f"–ù–∞–π–¥–µ–Ω–æ {len(configs)} –∫–æ–Ω—Ñ–∏–≥–æ–≤. –ù–∞—á–∏–Ω–∞—é –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É...")

    processed_results = []
    with concurrent.futures.ThreadPoolExecutor(max_workers=10) as executor:
        future_to_config = {executor.submit(process_single_config, conf, country_map): conf for conf in configs}
        for future in concurrent.futures.as_completed(future_to_config):
            try:
                processed_results.append(future.result())
            except Exception as e:
                print(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–Ω—Ñ–∏–≥–∞: {e}")

    print("\n–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ —Å–ø–∏—Å–∫—É –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞...")
    
    priority_map = {code: i for i, code in enumerate(PSKOV_PROXIMITY_ORDER)}
    processed_results.sort(key=lambda res: (priority_map.get(res[0], float('inf')), res[0]))

    final_lines = [res[1] for res in processed_results]

    if final_lines:
        output_filename = 'configs.txt'
        with open(output_filename, 'w', encoding='utf-8') as f:
            f.write('\n'.join(final_lines))
        print(f"\nüéâ –ì–æ—Ç–æ–≤–æ! {len(final_lines)} –∫–æ–Ω—Ñ–∏–≥–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ, –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ '{output_filename}'")
    else:
        print("–ù–µ—Ç –∫–æ–Ω—Ñ–∏–≥–æ–≤ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è.")


if __name__ == "__main__":
    run_processing()