import pyperclip
import requests
import re
from urllib.parse import quote
import sys
import json
import os
import concurrent.futures
import time

PSKOV_PROXIMITY_ORDER = [
    "FI", "LV", "BY", "LT", "EE", "PL", "UA", "SE", "NO", "DE", "CZ", "SK", "HU",
    "NL", "BE", "LU", "CH", "AT", "FR", "GB", "IE", "DK", "ES", "PT", "IT", "GR",
    "RO", "BG", "RS", "HR", "SI", "TR", "MD", "GE", "AM", "AZ", "CA", "US",
]

def load_country_map(filename="country_map.json"):
    script_dir = os.path.dirname(os.path.abspath(__file__))
    file_path = os.path.join(script_dir, filename)
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            return json.load(f)
    except FileNotFoundError:
        print(f"‚ùå –§–∞–π–ª '{filename}' –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É—é —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Å—Ç—Ä–∞–Ω.")
    except json.JSONDecodeError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON: {e}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ '{filename}': {e}")
    return {}

def get_flag_emoji(country_code: str) -> str:
    if not isinstance(country_code, str) or len(country_code) != 2 or not country_code.isalpha():
        return "üèÅ"
    # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤ –≤–º–µ—Å—Ç–æ —Å—Ä–µ–∑–æ–≤ –¥–ª—è –æ–¥–Ω–æ—Å–∏–º–≤–æ–ª—å–Ω—ã—Ö —Å—Ç—Ä–æ–∫ –Ω–µ–º–Ω–æ–≥–æ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–µ–µ
    offset = 0x1F1E6 - ord('A')
    return chr(ord(country_code[0]) + offset) + chr(ord(country_code[1]) + offset)

def get_country_info(ip_address: str, session: requests.Session):
    # –ü–µ—Ä–µ–¥–∞—á–∞ —Å–µ—Å—Å–∏–∏ –¥–ª—è –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
    url = f'https://ipwho.is/{ip_address}'
    params = {'fields': 'country,country_code'}
    try:
        # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞
        with session.get(url, params=params, timeout=5) as response:
            response.raise_for_status()
            data = response.json()

            if not data.get('success', False):
                error_message = data.get('message', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ API')
                print(f"‚ùå API –æ—à–∏–±–∫–∞ –¥–ª—è {ip_address}: {error_message}")
                return None

            return {
                'code': data.get('country_code'),
                'name': data.get('country')
            }
    except requests.exceptions.RequestException as e:
        print(f"üåê –°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ –¥–ª—è {ip_address}: {e}")
    # –ù–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ª–æ–≤–∏—Ç—å Exception, —Ç.–∫. RequestException –ø–æ–∫—Ä—ã–≤–∞–µ—Ç –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ —Å–ª—É—á–∞–µ–≤
    return None


def process_single_config(config_line: str, country_map: dict, session: requests.Session):
    # config_line.strip() —É–∂–µ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –≤ run_processing, –∑–¥–µ—Å—å –º–æ–∂–Ω–æ —É–±—Ä–∞—Ç—å
    ip_match = re.search(r'\b(?:\d{1,3}\.){3}\d{1,3}\b', config_line)
    if not ip_match:
        # –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –≤—ã–≤–æ–¥–∏—Ç—Å—è —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑
        return ('ZZZ', config_line)

    ip_address = ip_match.group(0)
    base_config = config_line.split('#', 1)[0].rstrip()

    country_info = get_country_info(ip_address, session)
    if not country_info or not country_info.get('code'):
        return ('ZZZ', config_line)

    country_code = country_info['code'].upper()
    country_name = country_map.get(country_code, country_info.get('name', 'Unknown'))
    
    flag = get_flag_emoji(country_code)
    new_name = f"{flag} {country_name}"
    encoded_name = quote(new_name)
    
    return country_code, f"{base_config}#{encoded_name}"

def run_processing():
    country_map = load_country_map()
    print(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–π —Å—Ç—Ä–∞–Ω: {len(country_map)}")

    try:
        clipboard_content = pyperclip.paste().strip()
        if not clipboard_content:
            print("üìã –ë—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞ –ø—É—Å—Ç")
            return
    except Exception as e:
        # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å tkinter –∫–∞–∫ –∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç
        print(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –±—É—Ñ–µ—Ä—É –æ–±–º–µ–Ω–∞: {e}")
        return

    # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø—É—Å—Ç—ã—Ö —Å—Ç—Ä–æ–∫
    configs = [line for line in clipboard_content.splitlines() if line.strip()]
    if not configs:
        print("‚ùå –ù–µ—Ç –∫–æ–Ω—Ñ–∏–≥–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
        return

    print(f"üîß –ù–∞–π–¥–µ–Ω–æ –∫–æ–Ω—Ñ–∏–≥–æ–≤: {len(configs)}")
    print("üöÄ –ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É...")
    start_time = time.time()
    
    processed_results = []
    # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ requests.Session –¥–ª—è –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è TCP-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
    with requests.Session() as session:
        with concurrent.futures.ThreadPoolExecutor(max_workers=15) as executor:
            # –ü—Ä–∏–≤—è–∑–∫–∞ future –∫ –∏—Å—Ö–æ–¥–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è –ª—É—á—à–µ–π –æ—Ç–ª–∞–¥–∫–∏
            future_to_config = {
                executor.submit(process_single_config, conf, country_map, session): conf 
                for conf in configs
            }
            
            for i, future in enumerate(concurrent.futures.as_completed(future_to_config)):
                config = future_to_config[future]
                try:
                    processed_results.append(future.result())
                except Exception as e:
                    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–ª—è '{config}': {e}")
                    processed_results.append(('ZZZ', config))
                
                # –ë–æ–ª–µ–µ —Ç–æ—á–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
                if (i + 1) % 10 == 0 or (i + 1) == len(configs):
                    print(f"‚è≥ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {i+1}/{len(configs)}")

    print(f"‚åõ –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {time.time() - start_time:.1f} —Å–µ–∫")

    # –°–æ–∑–¥–∞–Ω–∏–µ —Å–ª–æ–≤–∞—Ä—è –¥–ª—è O(1) –¥–æ—Å—Ç—É–ø–∞ –∫ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º
    priority_map = {code: idx for idx, code in enumerate(PSKOV_PROXIMITY_ORDER)}
    processed_results.sort(key=lambda x: (priority_map.get(x[0], float('inf')), x[0]))

    output_lines = [res[1] for res in processed_results]
    output_filename = 'configs.txt'
    
    try:
        with open(output_filename, 'w', encoding='utf-8') as f:
            f.write('\n'.join(output_lines))
        print(f"üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {output_filename}")
    except IOError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞ '{output_filename}': {e}")

if __name__ == "__main__":
    run_processing()