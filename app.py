import json
import re
from pathlib import Path
from urllib.parse import quote, unquote
import concurrent.futures

import pyperclip
import requests
from requests.adapters import HTTPAdapter, Retry

# --- –ù–ê–°–¢–†–û–ô–ö–ò ---
COUNTRY_MAP_FILENAME = "country_map.json"
OUTPUT_FILENAME = "configs.txt"
API_URL_TEMPLATE = "http://ip-api.com/json/{}?fields=status,message,country,countryCode"
API_TIMEOUT = 5
MAX_WORKERS = 10  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ API
FALLBACK_SORT_CODE = "ZZZ"
# –°–ø–∏—Å–æ–∫ –∫–æ–¥–æ–≤ —Å—Ç—Ä–∞–Ω –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –ø–æ –≥–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–π –±–ª–∏–∑–æ—Å—Ç–∏
CITY_PROXIMITY_ORDER = (
    # –ü—Ä—è–º—ã–µ —Å–æ—Å–µ–¥–∏ –∏ –†–§
    "RU", "FI", "LV", "BY", "LT", "EE", "PL", "UA", 
    # –ë–ª–∏–∑–∫–∞—è –ï–≤—Ä–æ–ø–∞
    "SE", "NO", "DE", "CZ", "SK", "HU", "MD",
    # –ó–∞–ø–∞–¥–Ω–∞—è –∏ –Æ–∂–Ω–∞—è –ï–≤—Ä–æ–ø–∞
    "NL", "BE", "LU", "CH", "AT", "FR", "GB", "IE", "DK",
    "ES", "PT", "IT", "GR", "RO", "BG", "RS", "HR", "SI",
    # –î—Ä—É–≥–∏–µ —Å—Ç—Ä–∞–Ω—ã
    "TR", "GE", "AM", "AZ", "CA", "US", "HK", "JP", "SG"
)


def load_maps(filename: str) -> tuple[dict, dict, str] | None:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–∞—Ä—Ç—É —Å—Ç—Ä–∞–Ω, –æ–±—Ä–∞—Ç–Ω—É—é –∫–∞—Ä—Ç—É –∏ regex-—à–∞–±–ª–æ–Ω –¥–ª—è –∫–æ–¥–æ–≤."""
    file_path = Path(__file__).resolve().parent / filename
    if not file_path.exists():
        print(f"‚ùå –û—à–∏–±–∫–∞: –§–∞–π–ª '{filename}' –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return None
    try:
        with file_path.open('r', encoding='utf-8') as f:
            country_map = json.load(f)
        
        # –ö–∞—Ä—Ç–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é: {"–≥–µ—Ä–º–∞–Ω–∏—è": "DE", "—Ñ—Ä–∞–Ω—Ü–∏—è": "FR"}
        reverse_country_map = {name.lower(): code for code, name in country_map.items()}
        
        # Regex –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–æ–¥–æ–≤ —Å—Ç—Ä–∞–Ω –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Å–ª–æ–≤: \b(DE|FR|US)\b
        country_codes_regex = r'\b(' + '|'.join(country_map.keys()) + r')\b'
        
        return country_map, reverse_country_map, country_codes_regex
    except (json.JSONDecodeError, IOError) as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ '{filename}': {e}")
        return None


def get_flag_emoji(country_code: str) -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ñ–ª–∞–≥-—ç–º–æ–¥–∑–∏ –ø–æ –¥–≤—É—Ö–±—É–∫–≤–µ–Ω–Ω–æ–º—É –∫–æ–¥—É —Å—Ç—Ä–∞–Ω—ã."""
    if not isinstance(country_code, str) or len(country_code) != 2 or not country_code.isalpha():
        return "üèÅ"
    offset = 0x1F1E6 - ord('A')
    return chr(ord(country_code[0]) + offset) + chr(ord(country_code[1]) + offset)


def create_requests_session() -> requests.Session:
    """–°–æ–∑–¥–∞–µ—Ç —Å–µ—Å—Å–∏—é requests —Å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–º–∏ –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏."""
    session = requests.Session()
    retries = Retry(total=3, backoff_factor=0.5, status_forcelist=[500, 502, 503, 504])
    adapter = HTTPAdapter(max_retries=retries, pool_maxsize=MAX_WORKERS)
    session.mount("http://", adapter)
    session.mount("https://", adapter)
    return session


def process_single_config(
    config_line: str,
    country_map: dict,
    reverse_country_map: dict,
    country_codes_regex: str,
    session: requests.Session
) -> tuple[str, str]:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏, –ø—Ä–∏–º–µ–Ω—è—è –Ω–æ–≤—É—é –ª–æ–≥–∏–∫—É.
    –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 1: –ü–æ–∏—Å–∫ —Å—Ç—Ä–∞–Ω—ã –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏.
    –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 2: –ü–æ–∏—Å–∫ —Å—Ç—Ä–∞–Ω—ã –ø–æ IP —á–µ—Ä–µ–∑ API.
    """
    if not config_line.strip():
        return FALLBACK_SORT_CODE, config_line

    parts = config_line.strip().split('#', 1)
    base_config = parts[0]
    remark = unquote(parts[1]) if len(parts) > 1 else ""
    found_code = None

    # --- –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 1: –ò—â–µ–º –ø–æ–¥—Å–∫–∞–∑–∫–∏ –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ (remark) ---
    if remark:
        # –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º –ø–æ–ª–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, "–ì–µ—Ä–º–∞–Ω–∏—è")
        for name_lower, code in reverse_country_map.items():
            if re.search(r'\b' + re.escape(name_lower) + r'\b', remark, re.IGNORECASE):
                found_code = code
                break
        
        # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø–æ –ø–æ–ª–Ω–æ–º—É –Ω–∞–∑–≤–∞–Ω–∏—é, –∏—â–µ–º –∫–æ–¥ —Å—Ç—Ä–∞–Ω—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, "DE")
        if not found_code:
            match = re.search(country_codes_regex, remark, re.IGNORECASE)
            if match:
                found_code = match.group(0).upper()

    # –ï—Å–ª–∏ –Ω–∞—à–ª–∏ –∫–æ–¥ –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏, —Ñ–æ—Ä–º–∏—Ä—É–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É –∏ –≤—ã—Ö–æ–¥–∏–º
    if found_code and found_code in country_map:
        country_name = country_map[found_code]
        flag = get_flag_emoji(found_code)
        new_name = f"{flag} {country_name}"
        print(f"‚úÖ  –ù–∞–π–¥–µ–Ω–æ –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏: '{remark[:30]}...' -> {new_name}")
        return found_code, f"{base_config}#{quote(new_name)}"

    # --- –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 2: –ï—Å–ª–∏ –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ –Ω–∏—á–µ–≥–æ –Ω–µ—Ç, –∏—â–µ–º –ø–æ IP (—Å—Ç–∞—Ä—ã–π –º–µ—Ç–æ–¥) ---
    ip_match = re.search(r'@[^,:]+', base_config)
    if not ip_match:
        ip_match = re.search(r'\b((?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\b', base_config)
    
    if not ip_match:
        print(f"‚ö†Ô∏è  –ù–∏ –ø–æ–¥—Å–∫–∞–∑–æ–∫, –Ω–∏ IP. –û—Å—Ç–∞–≤–ª—è—é –∫–∞–∫ –µ—Å—Ç—å: {config_line[:50]}...")
        return FALLBACK_SORT_CODE, config_line
        
    ip_address = ip_match.group(0).lstrip('@')
    
    try:
        response = session.get(API_URL_TEMPLATE.format(ip_address), timeout=API_TIMEOUT)
        response.raise_for_status()
        data = response.json()

        if data.get('status') == 'success' and data.get('countryCode'):
            country_code = data['countryCode']
            country_name = country_map.get(country_code, data.get('country', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'))
            flag = get_flag_emoji(country_code)
            new_name = f"{flag} {country_name}"
            print(f"‚úÖ  –ù–∞–π–¥–µ–Ω–æ –ø–æ IP: {ip_address:<15} -> {new_name}")
            return country_code, f"{base_config}#{quote(new_name)}"
        else:
            api_message = data.get('message', '–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö')
            print(f"‚ùå  API –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–∏–ª —Å—Ç—Ä–∞–Ω—É –¥–ª—è {ip_address:<15} ({api_message}).")
            return FALLBACK_SORT_CODE, config_line
            
    except requests.RequestException as e:
        print(f"‚ùå  –û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –¥–ª—è {ip_address:<15} ({type(e).__name__}).")
        return FALLBACK_SORT_CODE, config_line


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è, —É–ø—Ä–∞–≤–ª—è—é—â–∞—è –≤—Å–µ–º –ø—Ä–æ—Ü–µ—Å—Å–æ–º."""
    maps = load_maps(COUNTRY_MAP_FILENAME)
    if not maps:
        return
    country_map, reverse_country_map, country_codes_regex = maps

    try:
        clipboard_content = pyperclip.paste()
        if not clipboard_content:
            print("üìã –ë—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞ –ø—É—Å—Ç. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –∫–æ–Ω—Ñ–∏–≥–∏ –∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç —Å–Ω–æ–≤–∞.")
            return
    except pyperclip.PyperclipException:
        print("‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –±—É—Ñ–µ—Ä—É –æ–±–º–µ–Ω–∞.")
        return
        
    configs = clipboard_content.strip().splitlines()
    print(f"üîç –ù–∞–π–¥–µ–Ω–æ {len(configs)} –∫–æ–Ω—Ñ–∏–≥–æ–≤. –ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É –≤ {MAX_WORKERS} –ø–æ—Ç–æ–∫–æ–≤...")

    processed_results = []
    session = create_requests_session()
    
    with concurrent.futures.ThreadPoolExecutor(max_workers=MAX_WORKERS) as executor:
        future_to_config = {
            executor.submit(
                process_single_config, 
                conf, 
                country_map, 
                reverse_country_map, 
                country_codes_regex, 
                session
            ): conf 
            for conf in configs
        }
        for future in concurrent.futures.as_completed(future_to_config):
            try:
                processed_results.append(future.result())
            except Exception as e:
                print(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–Ω—Ñ–∏–≥–∞: {e}")

    print("\nüîÑ –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ —Å–ø–∏—Å–∫—É –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞...")
    
    priority_map = {code: i for i, code in enumerate(CITY_PROXIMITY_ORDER)}
    processed_results.sort(key=lambda res: (priority_map.get(res[0], float('inf')), res[0]))
    
    final_lines = [res[1] for res in processed_results]

    if final_lines:
        output_path = Path(__file__).resolve().parent / OUTPUT_FILENAME
        try:
            with output_path.open('w', encoding='utf-8') as f:
                f.write('\n'.join(final_lines))
            print(f"\nüéâ –ì–æ—Ç–æ–≤–æ! {len(final_lines)} –∫–æ–Ω—Ñ–∏–≥–æ–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ —Ñ–∞–π–ª '{output_path}'")
        except IOError as e:
            print(f"\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Ñ–∞–π–ª '{output_path}': {e}")
    else:
        print("\nü§∑‚Äç‚ôÇÔ∏è –ù–µ—Ç –∫–æ–Ω—Ñ–∏–≥–æ–≤ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è.")


if __name__ == "__main__":
    main()